// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trace.proto

/*
Package opencensus_proto_trace is a generated protocol buffer package.

It is generated from these files:
	trace.proto

It has these top-level messages:
	Span
	Status
	AttributeValue
	StackTrace
	Module
	TruncatableString
*/
package opencensus_proto_trace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Indicates whether the message was sent or received.
type Span_TimeEvent_MessageEvent_Type int32

const (
	// Unknown event type.
	Span_TimeEvent_MessageEvent_TYPE_UNSPECIFIED Span_TimeEvent_MessageEvent_Type = 0
	// Indicates a sent message.
	Span_TimeEvent_MessageEvent_SENT Span_TimeEvent_MessageEvent_Type = 1
	// Indicates a received message.
	Span_TimeEvent_MessageEvent_RECEIVED Span_TimeEvent_MessageEvent_Type = 2
)

var Span_TimeEvent_MessageEvent_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "SENT",
	2: "RECEIVED",
}
var Span_TimeEvent_MessageEvent_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"SENT":             1,
	"RECEIVED":         2,
}

func (x Span_TimeEvent_MessageEvent_Type) String() string {
	return proto.EnumName(Span_TimeEvent_MessageEvent_Type_name, int32(x))
}
func (Span_TimeEvent_MessageEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 1, 0}
}

// The relationship of the current span relative to the linked span: child,
// parent, or unspecified.
type Span_Link_Type int32

const (
	// The relationship of the two spans is unknown, or known but other
	// than parent-child.
	Span_Link_TYPE_UNSPECIFIED Span_Link_Type = 0
	// The linked span is a child of the current span.
	Span_Link_CHILD_LINKED_SPAN Span_Link_Type = 1
	// The linked span is a parent of the current span.
	Span_Link_PARENT_LINKED_SPAN Span_Link_Type = 2
)

var Span_Link_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "CHILD_LINKED_SPAN",
	2: "PARENT_LINKED_SPAN",
}
var Span_Link_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":   0,
	"CHILD_LINKED_SPAN":  1,
	"PARENT_LINKED_SPAN": 2,
}

func (x Span_Link_Type) String() string {
	return proto.EnumName(Span_Link_Type_name, int32(x))
}
func (Span_Link_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3, 0} }

// A span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Often, a trace contains a root span
// that describes the end-to-end latency, and one or more subspans for
// its sub-operations. A trace can also contain multiple root spans,
// or none at all. Spans do not need to be contiguous - there may be
// gaps or overlaps between spans in a trace.
// TODO(bdrutu): Add an example.
type Span struct {
	// A unique identifier for a trace. All spans from the same trace share
	// the same `trace_id`. The ID is a 16-byte array.
	//
	// This field is required.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array.
	//
	// This field is required.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// The `span_id` of this span's parent span. If this is a root span, then this
	// field must be empty. The ID is an 8-byte array.
	ParentSpanId []byte `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// A description of the span's operation.
	//
	// For example, the name can be a qualified method name or a file name
	// and a line number where the operation is called. A best practice is to use
	// the same display name at the same call point in an application.
	// This makes it easier to correlate spans in different traces.
	//
	// This field is required.
	Name *TruncatableString `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The start time of the span. On the client side, this is the time kept by
	// the local machine where the span execution starts. On the server side, this
	// is the time when the server's application handler starts running.
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The end time of the span. On the client side, this is the time kept by
	// the local machine where the span execution ends. On the server side, this
	// is the time when the server application handler stops running.
	EndTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// A set of attributes on the span.
	Attributes *Span_Attributes `protobuf:"bytes,7,opt,name=attributes" json:"attributes,omitempty"`
	// A stack trace captured at the start of the span.
	StackTrace *StackTrace `protobuf:"bytes,8,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// The included time events.
	TimeEvents *Span_TimeEvents `protobuf:"bytes,9,opt,name=time_events,json=timeEvents" json:"time_events,omitempty"`
	// The inclued links.
	Links *Span_Links `protobuf:"bytes,10,opt,name=links" json:"links,omitempty"`
	// An optional final status for this span.
	Status *Status `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
	// A highly recommended but not required flag that identifies when a trace
	// crosses a process boundary. True when the parent_span belongs to the
	// same process as the current span.
	SameProcessAsParentSpan *google_protobuf1.BoolValue `protobuf:"bytes,12,opt,name=same_process_as_parent_span,json=sameProcessAsParentSpan" json:"same_process_as_parent_span,omitempty"`
	// An optional number of child spans that were generated while this span
	// was active. If set, allows an implementation to detect missing child spans.
	ChildSpanCount *google_protobuf1.UInt32Value `protobuf:"bytes,13,opt,name=child_span_count,json=childSpanCount" json:"child_span_count,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Span) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span) GetParentSpanId() []byte {
	if m != nil {
		return m.ParentSpanId
	}
	return nil
}

func (m *Span) GetName() *TruncatableString {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Span) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Span) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Span) GetAttributes() *Span_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span) GetStackTrace() *StackTrace {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

func (m *Span) GetTimeEvents() *Span_TimeEvents {
	if m != nil {
		return m.TimeEvents
	}
	return nil
}

func (m *Span) GetLinks() *Span_Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Span) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Span) GetSameProcessAsParentSpan() *google_protobuf1.BoolValue {
	if m != nil {
		return m.SameProcessAsParentSpan
	}
	return nil
}

func (m *Span) GetChildSpanCount() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.ChildSpanCount
	}
	return nil
}

// A set of attributes, each with a key and a value.
type Span_Attributes struct {
	// The set of attributes. The value can be a string, an integer, or the
	// Boolean values `true` and `false`. For example:
	//
	//     "/instance_id": "my-instance"
	//     "/http/user_agent": ""
	//     "/http/server_latency": 300
	//     "abc.com/myattribute": true
	AttributeMap map[string]*AttributeValue `protobuf:"bytes,1,rep,name=attribute_map,json=attributeMap" json:"attribute_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of attributes that were discarded. Attributes can be discarded
	// because their keys are too long or because there are too many attributes.
	// If this value is 0, then no attributes were dropped.
	DroppedAttributesCount int32 `protobuf:"varint,2,opt,name=dropped_attributes_count,json=droppedAttributesCount" json:"dropped_attributes_count,omitempty"`
}

func (m *Span_Attributes) Reset()                    { *m = Span_Attributes{} }
func (m *Span_Attributes) String() string            { return proto.CompactTextString(m) }
func (*Span_Attributes) ProtoMessage()               {}
func (*Span_Attributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Span_Attributes) GetAttributeMap() map[string]*AttributeValue {
	if m != nil {
		return m.AttributeMap
	}
	return nil
}

func (m *Span_Attributes) GetDroppedAttributesCount() int32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

// A time-stamped annotation or message event in the Span.
type Span_TimeEvent struct {
	// The time the event occurred.
	Time *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	// A `TimeEvent` can contain either an `Annotation` object or a
	// `MessageEvent` object, but not both.
	//
	// Types that are valid to be assigned to Value:
	//	*Span_TimeEvent_Annotation_
	//	*Span_TimeEvent_MessageEvent_
	Value isSpan_TimeEvent_Value `protobuf_oneof:"value"`
}

func (m *Span_TimeEvent) Reset()                    { *m = Span_TimeEvent{} }
func (m *Span_TimeEvent) String() string            { return proto.CompactTextString(m) }
func (*Span_TimeEvent) ProtoMessage()               {}
func (*Span_TimeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type isSpan_TimeEvent_Value interface {
	isSpan_TimeEvent_Value()
}

type Span_TimeEvent_Annotation_ struct {
	Annotation *Span_TimeEvent_Annotation `protobuf:"bytes,2,opt,name=annotation,oneof"`
}
type Span_TimeEvent_MessageEvent_ struct {
	MessageEvent *Span_TimeEvent_MessageEvent `protobuf:"bytes,3,opt,name=message_event,json=messageEvent,oneof"`
}

func (*Span_TimeEvent_Annotation_) isSpan_TimeEvent_Value()   {}
func (*Span_TimeEvent_MessageEvent_) isSpan_TimeEvent_Value() {}

func (m *Span_TimeEvent) GetValue() isSpan_TimeEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Span_TimeEvent) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Span_TimeEvent) GetAnnotation() *Span_TimeEvent_Annotation {
	if x, ok := m.GetValue().(*Span_TimeEvent_Annotation_); ok {
		return x.Annotation
	}
	return nil
}

func (m *Span_TimeEvent) GetMessageEvent() *Span_TimeEvent_MessageEvent {
	if x, ok := m.GetValue().(*Span_TimeEvent_MessageEvent_); ok {
		return x.MessageEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Span_TimeEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Span_TimeEvent_OneofMarshaler, _Span_TimeEvent_OneofUnmarshaler, _Span_TimeEvent_OneofSizer, []interface{}{
		(*Span_TimeEvent_Annotation_)(nil),
		(*Span_TimeEvent_MessageEvent_)(nil),
	}
}

func _Span_TimeEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Span_TimeEvent)
	// value
	switch x := m.Value.(type) {
	case *Span_TimeEvent_Annotation_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *Span_TimeEvent_MessageEvent_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Span_TimeEvent.Value has unexpected type %T", x)
	}
	return nil
}

func _Span_TimeEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Span_TimeEvent)
	switch tag {
	case 2: // value.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Span_TimeEvent_Annotation)
		err := b.DecodeMessage(msg)
		m.Value = &Span_TimeEvent_Annotation_{msg}
		return true, err
	case 3: // value.message_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Span_TimeEvent_MessageEvent)
		err := b.DecodeMessage(msg)
		m.Value = &Span_TimeEvent_MessageEvent_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Span_TimeEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Span_TimeEvent)
	// value
	switch x := m.Value.(type) {
	case *Span_TimeEvent_Annotation_:
		s := proto.Size(x.Annotation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Span_TimeEvent_MessageEvent_:
		s := proto.Size(x.MessageEvent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A text annotation with a set of attributes.
type Span_TimeEvent_Annotation struct {
	// A user-supplied message describing the event.
	Description *TruncatableString `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// A set of attributes on the annotation.
	Attributes *Span_Attributes `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *Span_TimeEvent_Annotation) Reset()                    { *m = Span_TimeEvent_Annotation{} }
func (m *Span_TimeEvent_Annotation) String() string            { return proto.CompactTextString(m) }
func (*Span_TimeEvent_Annotation) ProtoMessage()               {}
func (*Span_TimeEvent_Annotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1, 0} }

func (m *Span_TimeEvent_Annotation) GetDescription() *TruncatableString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Span_TimeEvent_Annotation) GetAttributes() *Span_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// An event describing a message sent/received between Spans.
type Span_TimeEvent_MessageEvent struct {
	// The type of MessageEvent. Indicates whether the message was sent or
	// received.
	Type Span_TimeEvent_MessageEvent_Type `protobuf:"varint,1,opt,name=type,enum=opencensus.proto.trace.Span_TimeEvent_MessageEvent_Type" json:"type,omitempty"`
	// An identifier for the MessageEvent's message that can be used to match
	// SENT and RECEIVED MessageEvents. For example, this field could
	// represent a sequence ID for a streaming RPC. It is recommended to be
	// unique within a Span.
	Id uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// The number of uncompressed bytes sent or received.
	UncompressedSize uint64 `protobuf:"varint,3,opt,name=uncompressed_size,json=uncompressedSize" json:"uncompressed_size,omitempty"`
	// The number of compressed bytes sent or received. If zero, assumed to
	// be the same size as uncompressed.
	CompressedSize uint64 `protobuf:"varint,4,opt,name=compressed_size,json=compressedSize" json:"compressed_size,omitempty"`
}

func (m *Span_TimeEvent_MessageEvent) Reset()         { *m = Span_TimeEvent_MessageEvent{} }
func (m *Span_TimeEvent_MessageEvent) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent_MessageEvent) ProtoMessage()    {}
func (*Span_TimeEvent_MessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 1}
}

func (m *Span_TimeEvent_MessageEvent) GetType() Span_TimeEvent_MessageEvent_Type {
	if m != nil {
		return m.Type
	}
	return Span_TimeEvent_MessageEvent_TYPE_UNSPECIFIED
}

func (m *Span_TimeEvent_MessageEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Span_TimeEvent_MessageEvent) GetUncompressedSize() uint64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *Span_TimeEvent_MessageEvent) GetCompressedSize() uint64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

// A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
// on the span, consisting of either user-supplied key-value pairs, or
// details of a message sent/received between Spans.
type Span_TimeEvents struct {
	// A collection of `TimeEvent`s.
	TimeEvent []*Span_TimeEvent `protobuf:"bytes,1,rep,name=time_event,json=timeEvent" json:"time_event,omitempty"`
	// The number of dropped annotations in all the included time events.
	// If the value is 0, then no annotations were dropped.
	DroppedAnnotationsCount int32 `protobuf:"varint,2,opt,name=dropped_annotations_count,json=droppedAnnotationsCount" json:"dropped_annotations_count,omitempty"`
	// The number of dropped message events in all the included time events.
	// If the value is 0, then no message events were dropped.
	DroppedMessageEventsCount int32 `protobuf:"varint,3,opt,name=dropped_message_events_count,json=droppedMessageEventsCount" json:"dropped_message_events_count,omitempty"`
}

func (m *Span_TimeEvents) Reset()                    { *m = Span_TimeEvents{} }
func (m *Span_TimeEvents) String() string            { return proto.CompactTextString(m) }
func (*Span_TimeEvents) ProtoMessage()               {}
func (*Span_TimeEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *Span_TimeEvents) GetTimeEvent() []*Span_TimeEvent {
	if m != nil {
		return m.TimeEvent
	}
	return nil
}

func (m *Span_TimeEvents) GetDroppedAnnotationsCount() int32 {
	if m != nil {
		return m.DroppedAnnotationsCount
	}
	return 0
}

func (m *Span_TimeEvents) GetDroppedMessageEventsCount() int32 {
	if m != nil {
		return m.DroppedMessageEventsCount
	}
	return 0
}

// A pointer from the current span to another span in the same trace or in a
// different trace. For example, this can be used in batching operations,
// where a single batch handler processes multiple requests from different
// traces or when the handler receives a request from a different project.
type Span_Link struct {
	// A unique identifier for a trace. All spans from the same trace share
	// the same `trace_id`. The ID is a 16-byte array.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// The relationship of the current span relative to the linked span.
	Type Span_Link_Type `protobuf:"varint,3,opt,name=type,enum=opencensus.proto.trace.Span_Link_Type" json:"type,omitempty"`
	// A set of attributes on the link.
	Attributes *Span_Attributes `protobuf:"bytes,4,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *Span_Link) Reset()                    { *m = Span_Link{} }
func (m *Span_Link) String() string            { return proto.CompactTextString(m) }
func (*Span_Link) ProtoMessage()               {}
func (*Span_Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *Span_Link) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span_Link) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span_Link) GetType() Span_Link_Type {
	if m != nil {
		return m.Type
	}
	return Span_Link_TYPE_UNSPECIFIED
}

func (m *Span_Link) GetAttributes() *Span_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A collection of links, which are references from this span to a span
// in the same or different trace.
type Span_Links struct {
	// A collection of links.
	Link []*Span_Link `protobuf:"bytes,1,rep,name=link" json:"link,omitempty"`
	// The number of dropped links after the maximum size was enforced. If
	// this value is 0, then no links were dropped.
	DroppedLinksCount int32 `protobuf:"varint,2,opt,name=dropped_links_count,json=droppedLinksCount" json:"dropped_links_count,omitempty"`
}

func (m *Span_Links) Reset()                    { *m = Span_Links{} }
func (m *Span_Links) String() string            { return proto.CompactTextString(m) }
func (*Span_Links) ProtoMessage()               {}
func (*Span_Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

func (m *Span_Links) GetLink() []*Span_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Span_Links) GetDroppedLinksCount() int32 {
	if m != nil {
		return m.DroppedLinksCount
	}
	return 0
}

// The `Status` type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs. This proto's fields
// are a subset of those of
// [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
// which is used by [gRPC](https://github.com/grpc).
type Status struct {
	// The status code.
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	// A developer-facing error message, which should be in English.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The value of an Attribute.
type AttributeValue struct {
	// The type of the value.
	//
	// Types that are valid to be assigned to Value:
	//	*AttributeValue_StringValue
	//	*AttributeValue_IntValue
	//	*AttributeValue_BoolValue
	Value isAttributeValue_Value `protobuf_oneof:"value"`
}

func (m *AttributeValue) Reset()                    { *m = AttributeValue{} }
func (m *AttributeValue) String() string            { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()               {}
func (*AttributeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type AttributeValue_StringValue struct {
	StringValue *TruncatableString `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}
type AttributeValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}
type AttributeValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,oneof"`
}

func (*AttributeValue_StringValue) isAttributeValue_Value() {}
func (*AttributeValue_IntValue) isAttributeValue_Value()    {}
func (*AttributeValue_BoolValue) isAttributeValue_Value()   {}

func (m *AttributeValue) GetValue() isAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AttributeValue) GetStringValue() *TruncatableString {
	if x, ok := m.GetValue().(*AttributeValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *AttributeValue) GetIntValue() int64 {
	if x, ok := m.GetValue().(*AttributeValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *AttributeValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*AttributeValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AttributeValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AttributeValue_OneofMarshaler, _AttributeValue_OneofUnmarshaler, _AttributeValue_OneofSizer, []interface{}{
		(*AttributeValue_StringValue)(nil),
		(*AttributeValue_IntValue)(nil),
		(*AttributeValue_BoolValue)(nil),
	}
}

func _AttributeValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *AttributeValue_IntValue:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *AttributeValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("AttributeValue.Value has unexpected type %T", x)
	}
	return nil
}

func _AttributeValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AttributeValue)
	switch tag {
	case 1: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TruncatableString)
		err := b.DecodeMessage(msg)
		m.Value = &AttributeValue_StringValue{msg}
		return true, err
	case 2: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_IntValue{int64(x)}
		return true, err
	case 3: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_BoolValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _AttributeValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		s := proto.Size(x.StringValue)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttributeValue_IntValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *AttributeValue_BoolValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The call stack which originated this span.
type StackTrace struct {
	// Stack frames in this stack trace.
	StackFrames *StackTrace_StackFrames `protobuf:"bytes,1,opt,name=stack_frames,json=stackFrames" json:"stack_frames,omitempty"`
	// The hash ID is used to conserve network bandwidth for duplicate
	// stack traces within a single trace.
	//
	// Often multiple spans will have identical stack traces.
	// The first occurrence of a stack trace should contain both
	// `stack_frames` and a value in `stack_trace_hash_id`.
	//
	// Subsequent spans within the same request can refer
	// to that stack trace by setting only `stack_trace_hash_id`.
	//
	// TODO: describe how to deal with the case where stack_trace_hash_id is
	// zero because it was not set.
	StackTraceHashId uint64 `protobuf:"varint,2,opt,name=stack_trace_hash_id,json=stackTraceHashId" json:"stack_trace_hash_id,omitempty"`
}

func (m *StackTrace) Reset()                    { *m = StackTrace{} }
func (m *StackTrace) String() string            { return proto.CompactTextString(m) }
func (*StackTrace) ProtoMessage()               {}
func (*StackTrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StackTrace) GetStackFrames() *StackTrace_StackFrames {
	if m != nil {
		return m.StackFrames
	}
	return nil
}

func (m *StackTrace) GetStackTraceHashId() uint64 {
	if m != nil {
		return m.StackTraceHashId
	}
	return 0
}

// A single stack frame in a stack trace.
type StackTrace_StackFrame struct {
	// The fully-qualified name that uniquely identifies the function or
	// method that is active in this frame.
	FunctionName *TruncatableString `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	// An un-mangled function name, if `function_name` is
	// [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
	// be fully qualified.
	OriginalFunctionName *TruncatableString `protobuf:"bytes,2,opt,name=original_function_name,json=originalFunctionName" json:"original_function_name,omitempty"`
	// The name of the source file where the function call appears.
	FileName *TruncatableString `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// The line number in `file_name` where the function call appears.
	LineNumber int64 `protobuf:"varint,4,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	// The column number where the function call appears, if available.
	// This is important in JavaScript because of its anonymous functions.
	ColumnNumber int64 `protobuf:"varint,5,opt,name=column_number,json=columnNumber" json:"column_number,omitempty"`
	// The binary module from where the code was loaded.
	LoadModule *Module `protobuf:"bytes,6,opt,name=load_module,json=loadModule" json:"load_module,omitempty"`
	// The version of the deployed source code.
	SourceVersion *TruncatableString `protobuf:"bytes,7,opt,name=source_version,json=sourceVersion" json:"source_version,omitempty"`
}

func (m *StackTrace_StackFrame) Reset()                    { *m = StackTrace_StackFrame{} }
func (m *StackTrace_StackFrame) String() string            { return proto.CompactTextString(m) }
func (*StackTrace_StackFrame) ProtoMessage()               {}
func (*StackTrace_StackFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *StackTrace_StackFrame) GetFunctionName() *TruncatableString {
	if m != nil {
		return m.FunctionName
	}
	return nil
}

func (m *StackTrace_StackFrame) GetOriginalFunctionName() *TruncatableString {
	if m != nil {
		return m.OriginalFunctionName
	}
	return nil
}

func (m *StackTrace_StackFrame) GetFileName() *TruncatableString {
	if m != nil {
		return m.FileName
	}
	return nil
}

func (m *StackTrace_StackFrame) GetLineNumber() int64 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetColumnNumber() int64 {
	if m != nil {
		return m.ColumnNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetLoadModule() *Module {
	if m != nil {
		return m.LoadModule
	}
	return nil
}

func (m *StackTrace_StackFrame) GetSourceVersion() *TruncatableString {
	if m != nil {
		return m.SourceVersion
	}
	return nil
}

// A collection of stack frames, which can be truncated.
type StackTrace_StackFrames struct {
	// Stack frames in this call stack.
	Frame []*StackTrace_StackFrame `protobuf:"bytes,1,rep,name=frame" json:"frame,omitempty"`
	// The number of stack frames that were dropped because there
	// were too many stack frames.
	// If this value is 0, then no stack frames were dropped.
	DroppedFramesCount int32 `protobuf:"varint,2,opt,name=dropped_frames_count,json=droppedFramesCount" json:"dropped_frames_count,omitempty"`
}

func (m *StackTrace_StackFrames) Reset()                    { *m = StackTrace_StackFrames{} }
func (m *StackTrace_StackFrames) String() string            { return proto.CompactTextString(m) }
func (*StackTrace_StackFrames) ProtoMessage()               {}
func (*StackTrace_StackFrames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *StackTrace_StackFrames) GetFrame() []*StackTrace_StackFrame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *StackTrace_StackFrames) GetDroppedFramesCount() int32 {
	if m != nil {
		return m.DroppedFramesCount
	}
	return 0
}

// A description of a binary module.
type Module struct {
	// TODO: document the meaning of this field.
	// For example: main binary, kernel modules, and dynamic libraries
	// such as libc.so, sharedlib.so.
	Module *TruncatableString `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	// A unique identifier for the module, usually a hash of its
	// contents.
	BuildId *TruncatableString `protobuf:"bytes,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Module) GetModule() *TruncatableString {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *Module) GetBuildId() *TruncatableString {
	if m != nil {
		return m.BuildId
	}
	return nil
}

// A string that might be shortened to a specified length.
type TruncatableString struct {
	// The shortened string. For example, if the original string was 500 bytes long and
	// the limit of the string was 128 bytes, then this value contains the first 128
	// bytes of the 500-byte string. Note that truncation always happens on a
	// character boundary, to ensure that a truncated string is still valid UTF-8.
	// Because it may contain multi-byte characters, the size of the truncated string
	// may be less than the truncation limit.
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// The number of bytes removed from the original string. If this
	// value is 0, then the string was not shortened.
	TruncatedByteCount int32 `protobuf:"varint,2,opt,name=truncated_byte_count,json=truncatedByteCount" json:"truncated_byte_count,omitempty"`
}

func (m *TruncatableString) Reset()                    { *m = TruncatableString{} }
func (m *TruncatableString) String() string            { return proto.CompactTextString(m) }
func (*TruncatableString) ProtoMessage()               {}
func (*TruncatableString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TruncatableString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TruncatableString) GetTruncatedByteCount() int32 {
	if m != nil {
		return m.TruncatedByteCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Span)(nil), "opencensus.proto.trace.Span")
	proto.RegisterType((*Span_Attributes)(nil), "opencensus.proto.trace.Span.Attributes")
	proto.RegisterType((*Span_TimeEvent)(nil), "opencensus.proto.trace.Span.TimeEvent")
	proto.RegisterType((*Span_TimeEvent_Annotation)(nil), "opencensus.proto.trace.Span.TimeEvent.Annotation")
	proto.RegisterType((*Span_TimeEvent_MessageEvent)(nil), "opencensus.proto.trace.Span.TimeEvent.MessageEvent")
	proto.RegisterType((*Span_TimeEvents)(nil), "opencensus.proto.trace.Span.TimeEvents")
	proto.RegisterType((*Span_Link)(nil), "opencensus.proto.trace.Span.Link")
	proto.RegisterType((*Span_Links)(nil), "opencensus.proto.trace.Span.Links")
	proto.RegisterType((*Status)(nil), "opencensus.proto.trace.Status")
	proto.RegisterType((*AttributeValue)(nil), "opencensus.proto.trace.AttributeValue")
	proto.RegisterType((*StackTrace)(nil), "opencensus.proto.trace.StackTrace")
	proto.RegisterType((*StackTrace_StackFrame)(nil), "opencensus.proto.trace.StackTrace.StackFrame")
	proto.RegisterType((*StackTrace_StackFrames)(nil), "opencensus.proto.trace.StackTrace.StackFrames")
	proto.RegisterType((*Module)(nil), "opencensus.proto.trace.Module")
	proto.RegisterType((*TruncatableString)(nil), "opencensus.proto.trace.TruncatableString")
	proto.RegisterEnum("opencensus.proto.trace.Span_TimeEvent_MessageEvent_Type", Span_TimeEvent_MessageEvent_Type_name, Span_TimeEvent_MessageEvent_Type_value)
	proto.RegisterEnum("opencensus.proto.trace.Span_Link_Type", Span_Link_Type_name, Span_Link_Type_value)
}

func init() { proto.RegisterFile("trace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0xdb, 0xb6,
	0x17, 0x8f, 0x6c, 0xf9, 0x76, 0xec, 0xf8, 0xef, 0xb0, 0xf9, 0xa7, 0xae, 0xd7, 0xb5, 0x9d, 0x37,
	0xf4, 0x82, 0xa1, 0xea, 0x96, 0xae, 0x45, 0x5a, 0x6c, 0x28, 0x72, 0x71, 0x66, 0xa3, 0xa9, 0xe1,
	0xd1, 0x6e, 0xb1, 0x0b, 0x30, 0x81, 0x96, 0x98, 0x44, 0xa8, 0x4c, 0x09, 0x22, 0xd5, 0x21, 0x7d,
	0xde, 0xe3, 0x80, 0x61, 0x0f, 0xfb, 0x02, 0x7b, 0xdb, 0xb7, 0xd9, 0x27, 0xd8, 0xc7, 0x18, 0xb6,
	0xb7, 0x81, 0xa4, 0x24, 0xcb, 0xed, 0xd2, 0xc4, 0x79, 0x23, 0x79, 0xce, 0xef, 0xc7, 0x73, 0x78,
	0x2e, 0x3c, 0x50, 0x17, 0x11, 0x71, 0xa8, 0x15, 0x46, 0x81, 0x08, 0xd0, 0x46, 0x10, 0x52, 0xe6,
	0x50, 0xc6, 0x63, 0xae, 0x4f, 0x2c, 0x25, 0xed, 0x5c, 0x3f, 0x0a, 0x82, 0x23, 0x9f, 0xde, 0x53,
	0x67, 0xd3, 0xf8, 0xf0, 0x9e, 0xf0, 0x66, 0x94, 0x0b, 0x32, 0x0b, 0xb5, 0x5a, 0xe7, 0xda, 0x9b,
	0x0a, 0x3f, 0x44, 0x24, 0x0c, 0x69, 0x94, 0xd0, 0x74, 0xff, 0x59, 0x03, 0x73, 0x1c, 0x12, 0x86,
	0xae, 0x40, 0x55, 0x51, 0xda, 0x9e, 0xdb, 0x36, 0x6e, 0x18, 0xb7, 0x1b, 0xb8, 0xa2, 0xf6, 0x03,
	0x17, 0x5d, 0x86, 0x0a, 0x0f, 0x09, 0x93, 0x92, 0x82, 0x92, 0x94, 0xe5, 0x76, 0xe0, 0xa2, 0x8f,
	0xa0, 0x19, 0x92, 0x88, 0x32, 0x61, 0xa7, 0xf2, 0xa2, 0x92, 0x37, 0xf4, 0xe9, 0x58, 0x6b, 0x7d,
	0x01, 0x26, 0x23, 0x33, 0xda, 0x36, 0x6f, 0x18, 0xb7, 0xeb, 0x9b, 0x77, 0xac, 0xff, 0x76, 0xc5,
	0x9a, 0x44, 0x31, 0x73, 0x88, 0x20, 0x53, 0x9f, 0x8e, 0x45, 0xe4, 0xb1, 0x23, 0xac, 0x60, 0xe8,
	0x11, 0x00, 0x17, 0x24, 0x12, 0xb6, 0x74, 0xad, 0x5d, 0x52, 0x24, 0x1d, 0x4b, 0xbb, 0x65, 0xa5,
	0x6e, 0x59, 0x93, 0xd4, 0x6f, 0x5c, 0x53, 0xda, 0x72, 0x8f, 0x1e, 0x40, 0x95, 0x32, 0x57, 0x03,
	0xcb, 0x67, 0x02, 0x2b, 0x94, 0xb9, 0x0a, 0xf6, 0x25, 0x00, 0x11, 0x22, 0xf2, 0xa6, 0xb1, 0xa0,
	0xbc, 0x5d, 0x51, 0xc0, 0x5b, 0xa7, 0x99, 0x2d, 0x9d, 0xb4, 0xb6, 0x33, 0x75, 0x9c, 0x83, 0xa2,
	0x5d, 0xa8, 0x73, 0x41, 0x9c, 0x97, 0xb6, 0x52, 0x6d, 0x57, 0x15, 0x53, 0xf7, 0x54, 0x26, 0xa9,
	0x3a, 0x91, 0x4b, 0x0c, 0x3c, 0x5b, 0xa3, 0x3e, 0xd4, 0xa5, 0x03, 0x36, 0x7d, 0x45, 0x99, 0xe0,
	0xed, 0xda, 0x39, 0xcc, 0x91, 0x5e, 0xf4, 0x94, 0x3a, 0x06, 0x91, 0xad, 0xd1, 0x16, 0x94, 0x7c,
	0x8f, 0xbd, 0xe4, 0x6d, 0x38, 0xc3, 0x10, 0xc9, 0x71, 0x20, 0x35, 0xb1, 0x06, 0xa0, 0x87, 0x50,
	0xe6, 0x82, 0x88, 0x98, 0xb7, 0xeb, 0x0a, 0x7a, 0xed, 0x1d, 0x3e, 0x88, 0x98, 0xe3, 0x44, 0x1b,
	0x7d, 0x0d, 0xef, 0x71, 0x32, 0xa3, 0x76, 0x18, 0x05, 0x0e, 0xe5, 0xdc, 0x26, 0xdc, 0xce, 0x25,
	0x4c, 0xbb, 0x71, 0x4a, 0x4c, 0x76, 0x82, 0xc0, 0x7f, 0x41, 0xfc, 0x98, 0xe2, 0xcb, 0x12, 0x3e,
	0xd2, 0xe8, 0x6d, 0x3e, 0xca, 0xd2, 0x0a, 0xed, 0x43, 0xcb, 0x39, 0xf6, 0x7c, 0x57, 0x67, 0x9e,
	0x13, 0xc4, 0x4c, 0xb4, 0x57, 0x15, 0xdd, 0xd5, 0xb7, 0xe8, 0x9e, 0x0f, 0x98, 0xb8, 0xbf, 0xa9,
	0x09, 0x9b, 0x0a, 0x25, 0x29, 0x76, 0x25, 0xa6, 0xf3, 0x73, 0x01, 0x60, 0x1e, 0x3d, 0xf4, 0x3d,
	0xac, 0x66, 0xf1, 0xb3, 0x67, 0x24, 0x6c, 0x1b, 0x37, 0x8a, 0xb7, 0xeb, 0x9b, 0x8f, 0xce, 0x19,
	0xfd, 0xf9, 0xf2, 0x19, 0x09, 0x7b, 0x4c, 0x44, 0x27, 0xb8, 0x41, 0x72, 0x47, 0x68, 0x0b, 0xda,
	0x6e, 0x14, 0x84, 0x21, 0x75, 0xed, 0x79, 0x9e, 0x24, 0xe6, 0xcb, 0xda, 0x2a, 0xe1, 0x8d, 0x44,
	0x3e, 0x27, 0xd5, 0x86, 0x1e, 0xc1, 0xda, 0x5b, 0xe4, 0xa8, 0x05, 0xc5, 0x97, 0xf4, 0x44, 0xd5,
	0x6b, 0x0d, 0xcb, 0x25, 0xfa, 0x1c, 0x4a, 0xaf, 0xa4, 0xa3, 0x8a, 0xad, 0xbe, 0x79, 0xf3, 0x34,
	0xc3, 0x33, 0x2e, 0xfd, 0x2c, 0x1a, 0xf4, 0xb8, 0xb0, 0x65, 0x74, 0x7e, 0x2d, 0x41, 0x2d, 0x4b,
	0x20, 0x64, 0x81, 0xa9, 0xca, 0xc7, 0x38, 0xb3, 0x7c, 0x94, 0x1e, 0x1a, 0x03, 0x10, 0xc6, 0x02,
	0x41, 0x84, 0x17, 0xb0, 0xc4, 0x88, 0x4f, 0xcf, 0x97, 0xac, 0xd6, 0x76, 0x06, 0xec, 0xaf, 0xe0,
	0x1c, 0x0d, 0xfa, 0x16, 0x56, 0x67, 0x94, 0x73, 0x72, 0x94, 0x54, 0x81, 0x6a, 0x33, 0xf5, 0xcd,
	0xfb, 0xe7, 0xe4, 0x7d, 0xa6, 0xb1, 0x6a, 0xd3, 0x5f, 0xc1, 0x8d, 0x59, 0x6e, 0xdf, 0xf9, 0xcd,
	0x00, 0x98, 0x5f, 0x8c, 0x9e, 0x42, 0xdd, 0xa5, 0xdc, 0x89, 0xbc, 0x50, 0x39, 0x60, 0x2c, 0xdb,
	0xb3, 0xf2, 0xe8, 0x37, 0x1a, 0x49, 0xe1, 0xc2, 0x8d, 0xa4, 0xf3, 0xb7, 0x01, 0x8d, 0xbc, 0x17,
	0xe8, 0x00, 0x4c, 0x71, 0x12, 0xea, 0xb0, 0x34, 0x37, 0xb7, 0x2e, 0xf0, 0x10, 0xd6, 0xe4, 0x24,
	0xa4, 0x58, 0xb1, 0xa0, 0x26, 0x14, 0x92, 0xde, 0x6e, 0xe2, 0x82, 0xe7, 0xa2, 0x8f, 0x61, 0x2d,
	0x66, 0x4e, 0x30, 0x0b, 0x23, 0xca, 0x39, 0x75, 0x6d, 0xee, 0xbd, 0xa6, 0xea, 0xcd, 0x4d, 0xdc,
	0xca, 0x0b, 0xc6, 0xde, 0x6b, 0x8a, 0x6e, 0xc1, 0xff, 0xde, 0x54, 0x35, 0x95, 0x6a, 0x73, 0x51,
	0xb1, 0xfb, 0x19, 0x98, 0xf2, 0x4e, 0xb4, 0x0e, 0xad, 0xc9, 0x37, 0xa3, 0x9e, 0xfd, 0x7c, 0x38,
	0x1e, 0xf5, 0x76, 0x07, 0xfb, 0x83, 0xde, 0x5e, 0x6b, 0x05, 0x55, 0xc1, 0x1c, 0xf7, 0x86, 0x93,
	0x96, 0x81, 0x1a, 0x50, 0xc5, 0xbd, 0xdd, 0xde, 0xe0, 0x45, 0x6f, 0xaf, 0x55, 0xd8, 0xa9, 0x24,
	0x09, 0xdd, 0xf9, 0xc3, 0x00, 0x98, 0x37, 0x36, 0xd4, 0x03, 0x98, 0xb7, 0xc5, 0xa4, 0x4c, 0x6f,
	0x9e, 0xef, 0x1d, 0x70, 0x2d, 0x6b, 0x8a, 0xe8, 0x31, 0x5c, 0xc9, 0x0a, 0x32, 0xcb, 0x82, 0xc5,
	0x8a, 0xbc, 0x9c, 0x56, 0xe4, 0x5c, 0xae, 0x4a, 0x12, 0x3d, 0x81, 0xab, 0x29, 0x76, 0x21, 0x3d,
	0x53, 0x78, 0x51, 0xc1, 0x53, 0xfe, 0xfc, 0xe3, 0x27, 0x35, 0xfd, 0x53, 0x01, 0x4c, 0xd9, 0x67,
	0x2f, 0xf4, 0xf9, 0x3e, 0x4e, 0x52, 0xa0, 0xa8, 0x52, 0xe0, 0xe6, 0x99, 0xcd, 0x3c, 0x1f, 0xf0,
	0xc5, 0xc4, 0x34, 0x2f, 0x9c, 0x98, 0xdd, 0xa7, 0xef, 0x8c, 0xe9, 0xff, 0x61, 0x6d, 0xb7, 0x3f,
	0x38, 0xd8, 0xb3, 0x0f, 0x06, 0xc3, 0xa7, 0xbd, 0x3d, 0x7b, 0x3c, 0xda, 0x1e, 0xb6, 0x0c, 0xb4,
	0x01, 0x68, 0xb4, 0x8d, 0x7b, 0xc3, 0xc9, 0xc2, 0x79, 0xa1, 0xc3, 0xa0, 0xa4, 0x7e, 0x1d, 0xf4,
	0x00, 0x4c, 0xf9, 0xef, 0x24, 0x51, 0xfd, 0xe0, 0x4c, 0xd7, 0xb0, 0x52, 0x47, 0x16, 0x5c, 0x4a,
	0xe3, 0xa1, 0xbe, 0xad, 0x85, 0x28, 0xae, 0x25, 0x22, 0x75, 0x83, 0x7a, 0xfe, 0xee, 0x43, 0x28,
	0xeb, 0xff, 0x0a, 0x21, 0x30, 0x9d, 0xc0, 0xd5, 0xe5, 0x54, 0xc2, 0x6a, 0x8d, 0xda, 0x50, 0x49,
	0xa2, 0xaa, 0x18, 0x6a, 0x38, 0xdd, 0x76, 0x7f, 0x37, 0xa0, 0xb9, 0xd8, 0x3f, 0xd1, 0x10, 0x1a,
	0x5c, 0x35, 0x00, 0x5b, 0x77, 0xdf, 0x65, 0xfb, 0x46, 0x7f, 0x05, 0xd7, 0x35, 0x81, 0xe6, 0x7b,
	0x1f, 0x6a, 0x1e, 0x13, 0xf6, 0xbc, 0x95, 0x17, 0xfb, 0x2b, 0xb8, 0xea, 0x31, 0xa1, 0xc5, 0xd7,
	0x01, 0xa6, 0x41, 0xe0, 0x27, 0x72, 0x99, 0x01, 0xd5, 0xfe, 0x0a, 0xae, 0x4d, 0xd3, 0x7f, 0x33,
	0xab, 0x9a, 0xee, 0x5f, 0x25, 0x80, 0xf9, 0x60, 0x81, 0xbe, 0x92, 0x76, 0xca, 0x89, 0xe4, 0x30,
	0x22, 0x33, 0xca, 0x13, 0x3b, 0xad, 0xb3, 0x47, 0x12, 0xbd, 0xdc, 0x57, 0x28, 0xac, 0xa7, 0x1a,
	0xbd, 0x41, 0x77, 0xe1, 0x52, 0x6e, 0xc8, 0xb1, 0x8f, 0x09, 0x3f, 0xb6, 0xb3, 0x6e, 0xd2, 0x9a,
	0x0f, 0x32, 0x7d, 0xc2, 0x8f, 0x07, 0x6e, 0xe7, 0xcf, 0x62, 0x62, 0x90, 0x82, 0xa3, 0x21, 0xac,
	0x1e, 0xc6, 0xcc, 0x91, 0x55, 0x65, 0xab, 0x29, 0x71, 0xe9, 0x8e, 0xdb, 0x48, 0xf1, 0x43, 0xc9,
	0x67, 0xc3, 0x46, 0x10, 0x79, 0x47, 0x1e, 0x23, 0xbe, 0xbd, 0x48, 0x5c, 0x58, 0x96, 0x78, 0x3d,
	0x25, 0xda, 0xcf, 0x5f, 0xb0, 0x0f, 0xb5, 0x43, 0xcf, 0xa7, 0x9a, 0xb3, 0xb8, 0x2c, 0x67, 0x55,
	0x62, 0x15, 0xcf, 0x75, 0xa8, 0xfb, 0x1e, 0xa3, 0x36, 0x8b, 0x67, 0x53, 0x1a, 0xa9, 0x1a, 0x2c,
	0x62, 0x90, 0x47, 0x43, 0x75, 0x82, 0x3e, 0x84, 0x55, 0x27, 0xf0, 0xe3, 0x19, 0x4b, 0x55, 0x4a,
	0x4a, 0xa5, 0xa1, 0x0f, 0x13, 0xa5, 0x27, 0x50, 0xf7, 0x03, 0xe2, 0xda, 0xb3, 0xc0, 0x8d, 0xfd,
	0x74, 0xc8, 0x3d, 0x75, 0x3a, 0x7b, 0xa6, 0xb4, 0x30, 0x48, 0x88, 0x5e, 0xa3, 0x11, 0x34, 0x79,
	0x10, 0x47, 0x0e, 0xb5, 0x5f, 0xd1, 0x88, 0xcb, 0x2f, 0xaf, 0xb2, 0xac, 0x4f, 0xab, 0x9a, 0xe0,
	0x85, 0xc6, 0x77, 0x7e, 0x34, 0xa0, 0x9e, 0x4b, 0x16, 0xb4, 0x0b, 0x25, 0x95, 0x6c, 0x49, 0x35,
	0xdf, 0x5d, 0x2a, 0xd7, 0xb0, 0xc6, 0xa2, 0x4f, 0x60, 0x3d, 0x2d, 0x6d, 0x9d, 0xb9, 0x0b, 0xb5,
	0x8d, 0x12, 0x99, 0xbe, 0x51, 0x17, 0xf7, 0x2f, 0x06, 0x94, 0x13, 0x1f, 0xb7, 0xa1, 0x9c, 0xbc,
	0xcf, 0xd2, 0xc9, 0x95, 0x00, 0xd1, 0x1e, 0x54, 0xa7, 0xb1, 0x1c, 0x37, 0x93, 0xcc, 0x5e, 0x8a,
	0xa4, 0xa2, 0xa0, 0x03, 0xb7, 0xfb, 0x1d, 0xac, 0xbd, 0x25, 0x45, 0xeb, 0xe9, 0xc4, 0xa6, 0xa7,
	0x38, 0xbd, 0x91, 0x0e, 0x0b, 0xad, 0x4a, 0x5d, 0x7b, 0x7a, 0x22, 0xe8, 0xa2, 0xc3, 0x99, 0x6c,
	0xe7, 0x44, 0x50, 0xe5, 0xf0, 0xce, 0x1d, 0xb8, 0xe2, 0x05, 0xa7, 0x18, 0xb5, 0x03, 0xea, 0x61,
	0x47, 0xf2, 0x64, 0x64, 0x4c, 0xcb, 0x4a, 0x74, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05,
	0x10, 0x57, 0x42, 0x63, 0x0e, 0x00, 0x00,
}
