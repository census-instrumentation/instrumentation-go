// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package benchmarks is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Pong
	Ping
*/
package benchmarks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pong struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Pong)(nil), "benchmarks.Pong")
	proto.RegisterType((*Ping)(nil), "benchmarks.Ping")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pinger service

type PingerClient interface {
	PingUniTraced(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	PingUniUntraced(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type pingerClient struct {
	cc *grpc.ClientConn
}

func NewPingerClient(cc *grpc.ClientConn) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) PingUniTraced(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/benchmarks.Pinger/PingUniTraced", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingerClient) PingUniUntraced(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/benchmarks.Pinger/PingUniUntraced", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pinger service

type PingerServer interface {
	PingUniTraced(context.Context, *Ping) (*Pong, error)
	PingUniUntraced(context.Context, *Ping) (*Pong, error)
}

func RegisterPingerServer(s *grpc.Server, srv PingerServer) {
	s.RegisterService(&_Pinger_serviceDesc, srv)
}

func _Pinger_PingUniTraced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).PingUniTraced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmarks.Pinger/PingUniTraced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).PingUniTraced(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinger_PingUniUntraced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).PingUniUntraced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmarks.Pinger/PingUniUntraced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).PingUniUntraced(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchmarks.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingUniTraced",
			Handler:    _Pinger_PingUniTraced_Handler,
		},
		{
			MethodName: "PingUniUntraced",
			Handler:    _Pinger_PingUniUntraced_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x4a, 0xcd, 0x4b, 0xce,
	0xc8, 0x4d, 0x2c, 0xca, 0x2e, 0x56, 0x52, 0xe0, 0x62, 0x09, 0xc8, 0xcf, 0x4b, 0x17, 0x92, 0xe0,
	0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82,
	0x71, 0xc1, 0x2a, 0x32, 0xf1, 0xa9, 0x30, 0xaa, 0xe0, 0x62, 0x03, 0xa9, 0x48, 0x2d, 0x12, 0x32,
	0xe5, 0xe2, 0x05, 0xb1, 0x42, 0xf3, 0x32, 0x43, 0x8a, 0x12, 0x93, 0x53, 0x53, 0x84, 0x04, 0xf4,
	0x10, 0x76, 0xe9, 0x81, 0xa4, 0xa4, 0x50, 0x45, 0xf2, 0xf3, 0xd2, 0x95, 0x18, 0x84, 0xcc, 0xb9,
	0xf8, 0xa1, 0xda, 0x42, 0xf3, 0x4a, 0x48, 0xd0, 0x98, 0xc4, 0x06, 0xf6, 0x90, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x75, 0x18, 0x16, 0xf4, 0xe1, 0x00, 0x00, 0x00,
}
